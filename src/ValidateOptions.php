<?php

/**
 * This class is autogenerated by sbin/generate_options.php
 *
 * @noinspection DuplicatedCode
 * @noinspection PhpUnused
 */

declare(strict_types=1);

namespace Arokettu\Json;

/**
 * @generated
 */
final class ValidateOptions
{
    private $options;

    public static function build(
        int $options = 0,
        ?bool $invalidUtf8Ignore = null,
        ?bool $invalid_utf8_ignore = null
    ): self {
        if ($invalidUtf8Ignore !== null) {
            $options = $invalidUtf8Ignore ?
                $options | \JSON_INVALID_UTF8_IGNORE :
                $options & ~\JSON_INVALID_UTF8_IGNORE;
        }
        if ($invalid_utf8_ignore !== null) {
            $options = $invalid_utf8_ignore ?
                $options | \JSON_INVALID_UTF8_IGNORE :
                $options & ~\JSON_INVALID_UTF8_IGNORE;
        }
        return new self($options);
    }

    public static function default(): self
    {
        return new self(0);
    }

    public function __construct(int $options)
    {
        $this->options = $options;
    }

    public function value(): int
    {
        return $this->options;
    }

    public function toInt(): int
    {
        return $this->options;
    }

    public function toString(): string
    {
        $constants = [];
        if ($this->options & \JSON_INVALID_UTF8_IGNORE) {
            $constants[] = 'JSON_INVALID_UTF8_IGNORE';
        }
        return \implode(' | ', $constants);
    }

    public function withInvalidUtf8Ignore(): self
    {
        return new self($this->options | \JSON_INVALID_UTF8_IGNORE);
    }

    public function withoutInvalidUtf8Ignore(): self
    {
        return new self($this->options & ~\JSON_INVALID_UTF8_IGNORE);
    }
}
